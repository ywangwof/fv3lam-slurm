#!/bin/bash

function usage {
    echo " "
    echo "    USAGE: $0 [options] [VARDEFNS]"
    echo " "
    echo "    PURPOSE: Stage raw initial and lateral boundary conditions by calling wrapper scripts in <regional_workflow/ush/wrappers/>."
    echo " "
    echo "    VARDEFNS - var_defns.sh file generated by FV3LAM regional workflow"
    echo "               default: \"../var_defns.sh\""
    echo " "
    echo "    OPTIONS:"
    echo "              -h              Display this message"
    echo "              -n              Show command to be run only"
    echo "              -v              Verbose mode"
    #echo "              -m   odin       Machine (odin, stampede or macos)"
    #echo "                              default, determine automatically based on hostname."
    echo " "
    echo "                                     -- By Y. Wang (2020.10.21)"
    echo " "
    exit $1
}

#-----------------------------------------------------------------------
#
# Default values
#
#-----------------------------------------------------------------------

show=0
verb=0

VARDEFNS="../var_defns.sh"

#host_name=$(hostname)
#if [[ $host_name =~ "stampede2" ]]; then
#  machine="stampede"
#elif [[ $host_name =~ "odin" ]]; then
#  machine="odin"
#elif [[ $host_name =~ "4373-Wang-mbp" ]]; then
#  machine="macos"
#else
#  machine="UNKOWN"
#fi

#-----------------------------------------------------------------------
#
# Handle command line arguments
#
#-----------------------------------------------------------------------

while [[ $# > 0 ]]
    do
    key="$1"

    case $key in
        -h)
            usage 0
            ;;
        -n)
            show=1
            ;;
        -v)
            verb=1
            ;;
        #-m)
        #    machine=$2
        #    shift
        #    ;;
        -*)
            echo "Unknown option: $key"
            exit
            ;;
        *)
            if [[ -f $key ]]; then
                VARDEFNS=$key
            else
                echo ""
                echo "ERROR: unknown option, get [$key]."
                usage -2
            fi
            ;;
    esac
    shift # past argument or value
done

if [[ -f $VARDEFNS ]]; then
    echo "VARDEFNS = $VARDEFNS"
else
    echo ""
    echo "ERROR: cannot find var_defns.sh - <$VARDEFNS>."
    usage -2
fi

#-----------------------------------------------------------------------
#
# Definitions
#
#-----------------------------------------------------------------------

VARDEFNS="$(realpath ${VARDEFNS})"
source ${VARDEFNS}

##@@@@@@@@@@@@@@@@@@@@@ Run shell script @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

CODEBASE="${HOMErrfs}"
WRKDIR="${LOGDIR}"

if [[ ! -d $WRKDIR ]]; then
  mkdir $WRKDIR
fi

cd $WRKDIR

#
# Step 1.  Get files for IC
#

jobscript="get_ics_files.sh"

read -r -d '' taskheader <<EOF
#!/bin/bash

export EXPTDIR=${EXPTDIR}

EOF

sed "1d" ${CODEBASE}/ush/wrappers/run_get_ics.sh > ${jobscript}
echo "$taskheader" | cat - ${jobscript} > temp && mv temp ${jobscript}

if [[ $verb -eq 1 ]]; then
    echo "jobscript: $WRKDIR/$jobscript is created."
fi

chmod +x ${jobscript}
if [[ $show -eq 1 ]]; then
    echo "Execute \"$WRKDIR/$jobscript\" manually to stage initial conditions."
else
    ${jobscript} >& out.get_files_ics
    RC=$?
    if [ $RC = 0 ]; then
        echo "ICs downloaded successfully (see ${LOGDIR}/out.get_files_ics)"
    else
        echo "An error occured while downloading ICs, check logfile ${LOGDIR}/out.get_files_ics"
        exit 1
    fi
fi
#
# Step 2.  Get files for LBCs
#

jobscript="get_lbc_files.sh"

read -r -d '' taskheader <<EOF
#!/bin/bash

export EXPTDIR=${EXPTDIR}

EOF

sed "1d" ${CODEBASE}/ush/wrappers/run_get_lbcs.sh > ${jobscript}
echo "$taskheader" | cat - ${jobscript} > temp && mv temp ${jobscript}

if [[ $verb -eq 1 ]]; then
    echo "jobscript: $WRKDIR/$jobscript is created."
fi

chmod +x ${jobscript}

if [[ $show -eq 1 ]]; then
    echo "Execute \"$WRKDIR/$jobscript\" manually to stage LBCs."
else
    ${jobscript} >& out.get_files_lbcs
    RC=$?
    if [ $RC = 0 ]; then
        echo "LBCs downloaded successfully (see ${LOGDIR}/out.get_files_lbcs)"
        exit 0
    else
        echo "An error occured while downloading LBCs, check logfile ${LOGDIR}/out.get_files_lbcs"
        exit 1
    fi
fi

